= BASIC Wrangler Manual
:doctype: book
:toc: left
:icons: font
:source-highlighter: rouge

---

== Requirements

* Python 3 (any version of 3 should work, only tested with 3.7)
* pyperclip
* Gooey
* PyYAML
* duallog

You should run this before the first time you run the program:

[source,batchfile]
----
pip install pyperclip Gooey PyYAML duallog
----

== Usage

When run as `bwgui`, it will bring up the GUI.

=== Renumbering Labeled Listings

[source,batchfile]
----
bw renum <BASIC Type> <filename>
----

The BASIC Type is the dialect of BASIC that you wish to use. You can
find all the current definitions in
link:..\defs\basdefs.yaml[`basdefs.yaml`] with instructions in <<Supported BASIC Dialects>>.

When not in paste mode, it will output to `<filename-out>.bas` unless
you specify an output file name with `-o`. You can then either transfer
the file into a disk image or you can paste the code into an emulator if
you used the paste mode.

==== Extra Options

`-o <filename>` Set the output filename.

NOTE: If set, it will always output to a file, regardless of whether or not you also output to the clipboard.

`-p` Sets paste to clipboard mode (Certain dialects always output to a
file).

`-l <maximum line number length>` Sets a non-default maximum BASIC line
length.

`-n <number to start numbering with>` Sets the line number to begin
numbering with.

`-i <number to increment lines by>` Sets the increment between BASIC
lines.

==== Special Notes

Check <<Supported BASIC Dialects>> for any special instructions involving a BASIC dialect.

=== Converting from Numbered Listings and Other Labeled Formats

[source,batchfile]
----
bw convert <filename>
----

By default, the convert subcommand will take a numbered BASIC listing and output a labeled listing. It can be used on listings that contain multiple statements per line, like so:
[source, vb]
----
130 PRINT "YOU ARE VICTORIOUS.":PRINT:W=W+Y:A=Z:T=Z:IF W>=10 THEN GOSUB 190
----

It will output to `<filename-out>.bas` unless you specify an output file name with `-o`.

WARNING: The conversion routine uses keyword lists to tokenize BASIC code, and so if it encounters a keyword that it doesn't recognize it might misread it as a shorter keyword or output a `LexerError`. I will add more dialects to the keyword list in future.

==== Extra Options

`-o <filename>` Set the output filename.

`-c` Converts a labeled listing that was originally converted to use C64List.

`-d` Reformats DATA statements so that they can be crunched by the renumber routine. See <<DATA Statement Reformatter>>.

`-s` Splits a crunched listing. Use this if the output ends up look like this: `FOR J=ZTOG` rather than this: `FOR J=Z TO G`

===== Special Dialect Handlers

IMPORTANT: You should use these options when processing listings from these dialects, or the listing will not be processed correctly.

`-1` Processes abbreviated TRS-80 Level 1 BASIC listings. You may want to use `-s` with this option if there are no spaces in the listing.

`-a` Processes abbreviated Atari 8-bit BASIC listings.

`-t` Processes TI 99/4A BASIC listings.

`-z` Processes ZX Spectrum BASIC listings.

== Writing Programs for BASIC Wrangler

* _Write one statement per line_ unless youâ€™re doing something
complicated with IF statements. A statement is whatever you would write
up until you hit a colon to seperate statements.
* _Write with spaces where appropriate_. BASIC Wrangler will deal with
the output spacing for you.
* You should write all BASIC keywords in *upper-case*.
* Labels *MUST* start with an _ (underscore) character. I intend to
eventually remove the requirement to start with an underscore, but that
will have to wait until I update the renumbering routine to use the lexer.
* To indicate a jump target, you should have the label on its own with a
colon afterwards on the line directly preceding the jump target (aka, QBasic-style).
* For the ZX Spectrum, if you want to write portable code, you
should write GO TO and GO SUB as GOTO and GOSUB, as BASIC Wrangler will
fix those for you.
* If you want to see an example of what properly formatted code might
look like check out http://github.com/pahandav/battle-test[the Battle
System Test I wrote].

== DATA Statement Reformatter

This feature will move all the DATA statements in your program to the end of the
listing, and allow BASIC Wrangler to correctly format them for the line
length in your desired BASIC dialect.

To convert to this format, use the `-d` option when converting to labeled format. The renumbering routine will automatically combine the values back into DATA Statements upon renumbering.

WARNING: *_Do not use this feature if your program RESTOREs to a particular line
number._* I do plan on adding support for RESTORE statements eventually.

== Supported BASIC Dialects

=== Altair 8800

alt4k:: Altair 8800 4K BASIC
alt8k:: Altair 8800 8K BASIC
altext:: Altair 8800 Extended BASIC
altdisk:: Altair 8800 Disk BASIC

These definitions output for Altair 8800 BASIC versions. Of course, this should also work if you're running any of these BASIC versions on other S-100 systems like the IMSAI. I use link:http://www.classiccmp.org/altair32/index.html[the Altair32 Emulator], but there's a version of SIMH that also works, among others. These always output to the clipboard.

=== CP/M BASIC-80

cpm4:: CP/M BASIC-80 version 4
cpm5:: CP/M BASIC-80 version 5

These definitions are for BASIC-80. The main difference between them is that version 5 requires spaces between keywords and has some extra commands. You can paste it in or import it from an ASCII file.

=== Microsoft BASCOM

bascom:: Microsoft BASIC Compiler

This definition is for BASCOM for CP/M. It is extremely similar to BASIC-80.

=== Generic BASIC

generic:: Generic BASIC

This definition is a generic BASIC definition. It makes no attempt to crunch lines, and so it should work with anything. When in doubt, use this.

=== Commodore BASIC

pet:: Commodore PET BASIC
vic20:: Commodore VIC-20 BASIC
c64:: Commodore 64 BASIC
plus4:: Commodore PLUS/4 BASIC
c128:: Commodore 128 BASIC

These definitions are for different CBM dialects. The main difference with these is the line length for pasting. These format the file output for petcat, which is included with the VICE emulator. For the PET, you should run `petcat` with `-l 0401` to set the load address correctly.

=== Apple ][

apple2:: Applesoft BASIC

This definition is for Applesoft BASIC. The file output should work with any tokenizer.

=== TRS-80 Models I, III, 4

trs80l1:: TRS-80 Level 1 BASIC
trs80l2:: TRS-80 Level 2 BASIC
trs80m4:: TRS-80 Model 4 BASIC

These cover the BASIC dialects on the TRS-80. The Level 1 definition only works with Level 1, and always outputs to clipboard for pasting in with the TRS32 emulator. It has not been tested with other emulators.

=== Atari 8-bit

atari:: Atari 8-bit BASIC

When pasting with this, it will add a POKE 82,0 before pasting in your code, so it can cram a little more text into the buffer. When importing file output, you must ENTER the text file into your emulator. You can then save the file to disk or tape. There may be tokenizers for Atari BASIC out there, but I haven't found any yet.

=== Texas Instruments 99/4A

ti99:: TI 99/4A BASIC
ti99xb:: TI 99/4A Extended BASIC

When outputting to a file, you should tokenize the code with link:https://github.com/mizapf/tiimagetool[TIImageTool] (I haven't tested other tokenizers).

=== Tandy Color Computer

coco:: Tandy Color BASIC

You can either import your code by loading the file as a tape in Xroar, or you can use link:https://sourceforge.net/projects/toolshed/[Toolshed's] `decb` command with the `-t` option to import a tokenized file to a disk image.

=== Apple ///

apple3:: Apple /// Business BASIC

Import the output file to a ProDOS disk image, and `EXEC` the imported file. Don't mess around with pasting, MAME isn't very good at it.

=== Sinclair BASIC

zx81:: Sinclair ZX-81 BASIC
zxspectrum:: Sinclair ZX Spectrum BASIC

These output to .b81 and .b82 files, respectively. These are meant to be tokenized by the EightyOne emulator, but other tokenizers should also work. For the ZX Spectrum, you should write GO TO and GO SUB as GOTO and GOSUB, as they will be fixed for you. If you convert a numbered Spectrum listing to labeled format, you'll need to use the special handler for it, as it won't recognize the GO TOs and GO SUBs without it.

---
WARNING: I haven't added keywords for the dialects of BASIC that come after this point, and so conversion from numbered format may not work 100% correctly.

---

=== BBC Micro

bbc:: BBC Micro BASIC

Import the output file to your emulator, and `*EXEC` the file. There may be tokenizers out there, but I haven't found any yet.

=== Tangerine Oric

oric:: Tangerine Oric BASIC

If using file mode, you should tokenize the file with link:https://github.com/oric-international/oric-tools[txt2bas], using the appropriate tokenization setting (`-v0` for the Oric-1, `-v1` for the Atmos). This will produce a tape image that can be loaded into an emulator.

=== MSX

msx:: MSX BASIC

The MSX can tokenize from ASCII, so just put the file in a disc image and load it.

=== Coleco ADAM

adam:: Coleco ADAM SmartBASIC

While it is possible to paste, you should use file mode, and import to a ddp or dsk image using either the ADAM Image Manager, or the EOS Disk Tools. The EOS Disk Tools only run under DOS, so you'll need to run a DOS emulator to use them.

=== Amstrad CPC

cpc:: Amstrad CPC BASIC

The Amstrad CPC can load ASCII files, so just put it in a disk image and load it in.

=== Apple IIGS

gsoft:: Apple IIGS GSoft BASIC

I like link:http://www.byteworks.us/Byte_Works/Morgue.html[GSoft BASIC] for IIGS programs. Just put the output file on a ProDOS volume, and you can `LOAD` it with GSoft.

=== Commodore Amiga

amiga:: Commodore Amiga ACE BASIC Compiler

As AmigaBASIC was unsupported after Workbench 1.3, you should use link:http://aminet.net/package/dev/basic/ace_final_r2[the ACE BASIC compiler]. To compile, you should set up a shared drive with WinUAE, copy the .b file to a shared emulator directory, and compile with `bas -iO <file name minus the b extension>`.

=== Acorn Archemedes/RISC OS

riscos:: BBC RISC OS BASIC

The RISC OS dialect needs to be tokenized to be runnable. To do this, copy the ,ffb file to a shared emulator directory, load it in !Edit in RISC OS by shift-double-clicking it, and then save it back with F3.

=== GW-BASIC

gwbasic:: Microsoft GW-BASIC

GW-BASIC can load directly from ASCII.

=== Quick BASIC/PDS

qbasic:: Microsoft Quick BASIC Compiler

Obviously, it loads directly from ASCII files.

=== FreeBASIC

freebasic:: FreeBASIC Compiler

FreeBASIC doesn't like line numbers with its normal mode, so compile with fbc -lang qb.
